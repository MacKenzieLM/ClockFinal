
import com.toedter.calendar.JDateChooser;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * This is my frame class for setting alarms and button functions
 * @author Lauren Smart 19016480
 */
public class SetAlarm3  {

  JFrame frame = new JFrame("Set Alarm");
    //the main storage for the alarms
    static ArrayList<AlarmObject> alarmObject ;
    static ArrayList<AlarmObject> mainAlarmTable;
    
    
      @SuppressWarnings("unchecked")
      public static void main(String[] args){
      }
        private static ArrayList<AlarmObject> alarmListStorage;
      //  static AlarmObject tempMilitaryTime;
        final JLabel currentTime;
        final JLabel userInstructLabel = new JLabel();
        String alarmName;
        String alarmDate;
       AlarmTrigger alarmTrigger;
  
    JTextArea area;
    JLabel label;
    
       
        // constructor for SetAlarm
        public SetAlarm3(){
          
        {  
     
        final JTextField alarmName = new JTextField();
  
        JTextField hoursTF= new JTextField(2);
        JTextField minutesTF = new JTextField(2);
      
   
      
        
        // create  JTable
        final JTable table = new JTable(); 
        String[] frameTitles = {"Alarm Name:", "Date:", "Time Hours:", "Time Minutes:", "Time Seconds:"};
        String[] listAlarms = {alarmName.toString()};
        JTextField[] gtField= new JTextField[frameTitles.length];
        @SuppressWarnings("unchecked")
        JList list = new JList (new DefaultListModel());
 
        String hoursArray[] = {"01","02","03","04","05","06","07","08","09",
                                "10","12","13","14","15","16","17","18","19","20","21","22","23"};
        String minutesArray[]= {"00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30",
                                "31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59"};
  
    
        @SuppressWarnings("unchecked")
        final JComboBox comboHours = new JComboBox(hoursArray);
        @SuppressWarnings("unchecked")
        final JComboBox comboMinutes = new JComboBox(minutesArray);

        // create a table model and set a Column Identifiers to this model 
        Object[] columns = {"Alarm Name:","Date:","Time Hours:", "Time Minutes:"};
        Arrays.toString(columns);
        final DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns);
        
        // set the model to the table
        table.setModel(model);
        
        // Change A JTable Background Color, Font Size, Font Color, Row Height
       
        Font font = new Font("",1,22);
        table.setFont(font);
        table.setRowHeight(30);
    
        // I have used this tutorial to set my clock to update every second    
        // https://stackoverflow.com/questions/19727449/java-how-to-update-a-panel-every-second  
        Timer timer = new Timer(1000, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            currentTime.setText(new Date().toString());
        }
    });
        timer.start(); 
      
        currentTime=new JLabel(new Date().toString());
        frame.add(currentTime);
        currentTime.setBounds(20, 210, 300, 25);      
        currentTime.setFont((new Font("Verdana", Font.PLAIN, 15)));    
    
        // add date chooser
        final JDateChooser alarmDate = new JDateChooser();
      
        // create JLabels
        JLabel alarmNameLabel = new JLabel("Alarm Name:");
        JLabel alarmDateLabel = new JLabel("Alarm Date:");
        JLabel alarmHoursLabel = new JLabel("Set Hour:");
        JLabel alarmMinutesLabel = new JLabel("Set Minutes:");
        JLabel alarmSecondsLabel = new JLabel("Set Seconds:");
        JLabel userInstructLabel = new JLabel("*Please click on row to highlight*");    
        userInstructLabel.setFont((new Font("Verdana", Font.PLAIN, 15)));
       
        // set the layouts for labels
        alarmNameLabel.setBounds(20, 250, 100, 25);
        alarmDateLabel.setBounds(20, 290, 100, 25);
        alarmHoursLabel.setBounds(20, 330, 100, 25);
        alarmMinutesLabel.setBounds(150, 330, 100, 25);
        alarmSecondsLabel.setBounds(300, 330, 100, 25);
        userInstructLabel.setBounds(20, 3600, 100, 25);
        
        
        alarmNameLabel.add(list);
        // create JButtons
        final JButton btnSetAlarm = new JButton("Set Alarm");
        JButton btnDelete = new JButton("Delete");
        JButton btnUpdate = new JButton("Update");     
        JButton btnSaveToFile = new JButton("Save alarm to file");    
       
        alarmName.setBounds(120, 250, 130, 25);
        alarmDate.setBounds(120, 290, 150, 25);
      
        
     // alarmDate.setBounds(120, 250, 100, 25);
       comboHours.setBounds(80, 330, 50, 25);
       comboMinutes.setBounds(230, 330, 50, 25);
    
        
        btnSetAlarm.setBounds(500, 220, 100, 25);
        btnUpdate.setBounds(500, 265, 100, 25);
        btnDelete.setBounds(500, 310, 100, 25);
        btnSaveToFile.setBounds(700, 220, 150, 25);
        
        // create JScrollPane
        JScrollPane pane = new JScrollPane(table);
        pane.setBounds(0, 0, 880, 200);
        
        frame.setLayout(null);
        
        frame.add(pane);
        
        // add JTextFields to the jframe
        frame.add(alarmName);
        frame.add(alarmDate);
        frame.add(comboHours);
        frame.add(comboMinutes);

      
        // add the labels to frame
        frame.add(currentTime);
        frame.add(alarmNameLabel);
        frame.add(alarmDateLabel);
        frame.add(alarmHoursLabel);
        frame.add(alarmMinutesLabel);
  
        frame.add(userInstructLabel);
        // add JButtons to the jframe
        frame.add(btnSetAlarm);
        frame.add(btnDelete);
        frame.add(btnUpdate);
        frame.add(btnSaveToFile);
      //  frame.add(label);
        
        // create an array of objects to set the row data
        final Object[] row = new Object[4];
        
////        // button add row
//       btnAdd.addActionListener(new ActionListener(){
//
//            @Override
//            public void actionPerformed(ActionEvent e) {
//             
//                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
//                String date = sdf.format(alarmDate.getDate());
//           
//                row[0] = alarmName.getText();
//                row[1] = date;
//                row[2] = comboHours.getSelectedItem().toString();
//                row[3] = comboMinutes.getSelectedItem().toString();
//                row[4] = comboSeconds.getSelectedItem().toString();
//                
//                // add row to the model
//                model.addRow(row);
//            }
//        });



/**
	 * This function gets the values from the combo boxes and combines them into one string.
	 * @returns the combined string which corresponds to the alarm time. (hh:mm AM/PM)
	 */

    /**
     * This function gets the values from the combo boxes and combines them into one string.
     * @return
     * @returns the combined string which corresponds to the alarm time. (hh:mm AM/PM)
     */
   

// button add row
btnSetAlarm.addActionListener(new ActionListener(){

    @Override
    public void actionPerformed(ActionEvent e) {
        
         // i = the index of the selected row
                int i = table.getSelectedRow();
                if(i >= 0){
                      String data1 = "Alarm Time: " + comboHours.getItemAt(comboHours.getSelectedIndex())
                + ":" + comboMinutes.getItemAt(comboMinutes.getSelectedIndex()); 
            
             String data2 = "Alarm Time: " + comboHours.getItemAt(comboHours.getSelectedIndex())
                + ":" + comboMinutes.getItemAt(comboMinutes.getSelectedIndex()); 
                int compareTo = data1.compareTo(data2);
                }
                

        ArrayList<AlarmObject> alarmObject = new ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
        String date = sdf.format(alarmDate.getDate());         
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy '@'hh:mm a");  

        // check if user has inputted all fields
        if(alarmName.getText().isEmpty() || alarmDate.getDateFormatString() == null || 
            comboHours.getSelectedItem()==null || 
                comboMinutes.getSelectedItem()==null){

            // output warning
            JOptionPane.showMessageDialog(alarmName,"Please enter all fields");

    }else{

        row[0] = alarmName.getText();
        row[1] = date;
        row[2] = comboHours.getSelectedItem().toString();
        row[3] = comboMinutes.getSelectedItem().toString();
     
            // add row to the model
            model.addRow(row);
                 
                 
    JOptionPane.showMessageDialog(alarmName, "Alarm data added");
              
        }   
     }   
});
        

       // button remove row
        btnDelete.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
            
                // i = the index of the selected row
                int i = table.getSelectedRow();
                if(i >= 0){
                    // remove a row from jtable
                    model.removeRow(i);
                    }
                        else{
                            System.out.println("Delete ");
                }
            }
        });
        
        // get selected row data From table to textfields 
        table.addMouseListener(new MouseAdapter(){
        
        @Override
        public void mouseClicked(MouseEvent e){
            
            // i = the index of the selected row
            int i = table.getSelectedRow();
            
            alarmName.setText(model.getValueAt(i, 0).toString());
            
            alarmDate.setDateFormatString(model.getValueAt(i, 1).toString());
            comboHours.setSelectedItem(model.getValueAt(i, 2).toString());
            comboMinutes.setSelectedItem(model.getValueAt(i, 3).toString());
       
        }
        });
        
        // button update row
        btnUpdate.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
             
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                String date = sdf.format(alarmDate.getDate()); 
                
                row[0] = alarmName.getText();
                row[1] = date;
                row[2] = comboHours.getSelectedItem().toString();
                row[3] =comboMinutes.getSelectedItem().toString();
         
                // i = the index of the selected row
                int i = table.getSelectedRow();
                
                if(i >= 0) 
                {
                   model.setValueAt(alarmName.getText(), i, 0);
                   model.setValueAt(date, i, 1);
                   model.setValueAt(comboHours.getSelectedItem(),i,2);
                   model.setValueAt(comboMinutes.getSelectedItem(),i,3);
              
                }
                else{
                    System.out.println("Update "); 
                      }
                          }
            });
        
        frame.setSize(900,500);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        
    //I have used this tutorial on how to save data from jtable into txt file
    //https://community.oracle.com/tech/developers/discussion/1248613/how-to-save-data-from-jtable-into-txt-file
    // button save to file
    btnSaveToFile.addActionListener(new ActionListener(){
    @Override
    public void actionPerformed(ActionEvent e) 
    {
        try {
            StringBuilder fileContent = new StringBuilder();
            TableModel tableModel = table.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                 // read the data in each cell in a row
                Object alarmName = model.getValueAt(i, 0);
                Object alarmDate = model.getValueAt(i, 1);
                Object comboHours = model.getValueAt(i, 2);
                Object comboMinutes = model.getValueAt(i, 3);
        
                 // append each cell value to give a string output
                 fileContent.append(alarmName).append(", ").append(alarmDate).append(", ").append(comboHours).append(":").append(comboMinutes).append("\n"); //.append(":").append(comboSeconds).append("\n");
               
            }
            
            FileWriter fileWriter = new FileWriter("C:\\Users\\PC\\Documents\\NetBeansProjects\\ClockForGraham_2\\clockforgraham.txt");            
            fileWriter.write(fileContent.toString());
            fileWriter.flush();
            
            try {
                fileWriter.close();
                
                    } catch (IOException ex) {
                        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                        }
                            } catch (IOException ex) {
                                Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                }
            } 
    });
    }
        
        }
        
    /**
    * This function sees whether the alarm has passed, the alarm should go off, or if the alarm time has not been reached.
    *  https://github.com/tmcclure4/AlarmClockJava
     * @param comboHours
     * @param comboMinutes
    * @param alarmTime-the time the alarm is to go off
     * @return 
    * 
    */
    public static int sameTime(int comboHours, int comboMinutes, int alarmTime)
    {
        //get into military time
        int currentTime=(comboHours*100)+comboMinutes;
        
        int returnValue;
        
        //the alarm time hasn't passed yet, stop
        if(currentTime<alarmTime){
                returnValue=0;
                }
                    //times are the same, set alarm off
                    else if(currentTime==alarmTime){
                    returnValue=1;
                    }   
                        //currentTime>alarmTime, alarm has gone off already, keep going
                        else{
                         returnValue=2;
                            }
                            return returnValue;
	}    
       
    }

    
    

