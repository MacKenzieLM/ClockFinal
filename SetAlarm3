
import com.toedter.calendar.JDateChooser;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * This is my frame class for setting alarms and button functions
 * @author Lauren Smart 19016480
 */
public class SetAlarm3  {

    JFrame frame = new JFrame("Set Alarm");

   
    
      @SuppressWarnings("unchecked")
      public static void main(String[] args){
      }
    final JLabel clockLabel;
    final JLabel userInstructLabel = new JLabel();
      
    // constructor for SetAlarm
    public SetAlarm3()
    {  
       // String date;
        final JTextField alarmName = new JTextField();
  
      //  JTextField hoursTF= new JTextField(2);
      //  JTextField minutesTF = new JTextField(2);
       // JTextFi
        JFrame frame = new JFrame("Set Alarm");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // create JFrame and JTable
      
        final JTable table = new JTable(); 
        String[] frameTitles = {"Alarm Name:", "Date:", "Time Hours:", "Time Minutes:", "Time Seconds:"};
        String[] listAlarms = {alarmName.toString()};
        JTextField[] gtField= new JTextField[frameTitles.length];
        JList list = new JList (new DefaultListModel());
 
    String hoursArray[] = {"01","02","03","04","05","06","07","08","09",
      "10","12","13","14","15","16","17","18","19","20","21","22","23"};
    String minutesArray[]= {"00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30",
			"31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59"};
    String secondsArray[]= {"00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30",
			"31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59"};
    
  final JComboBox comboHours = new JComboBox(hoursArray);
  final JComboBox comboMinutes = new JComboBox(minutesArray);
  final JComboBox comboSeconds = new JComboBox(secondsArray);
        // create a table model and set a Column Identifiers to this model 
        Object[] columns = {"Alarm Name:","Date:","Time Hours:", "Time Minutes:", "Time Seconds:"};
        Arrays.toString(columns);
        final DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns);
        
        // set the model to the table
        table.setModel(model);
        
        // Change A JTable Background Color, Font Size, Font Color, Row Height
       
        Font font = new Font("",1,22);
        table.setFont(font);
        table.setRowHeight(30);
    
        // I have used this tutorial to set my clock to update every second    
        // https://stackoverflow.com/questions/19727449/java-how-to-update-a-panel-every-second  
        Timer timer = new Timer(1000, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent arg0) {
            clockLabel.setText(new Date().toString());
        }
    });
        timer.start(); 
        //JFrame f = new JFrame();
        clockLabel=new JLabel(new Date().toString());
        frame.add(clockLabel);
        clockLabel.setBounds(20, 210, 300, 25);      
        clockLabel.setFont((new Font("Verdana", Font.PLAIN, 15)));    
    
        // add date chooser
        final JDateChooser alarmDate = new JDateChooser();
      
        // create JLabels
        JLabel alarmNameLabel = new JLabel("Alarm Name:");
        JLabel alarmDateLabel = new JLabel("Alarm Date:");
        JLabel alarmHoursLabel = new JLabel("Set Hour:");
        JLabel alarmMinutesLabel = new JLabel("Set Minutes:");
        JLabel alarmSecondsLabel = new JLabel("Set Seconds:");
        JLabel userInstructLabel = new JLabel("*Please click on row to highlight*");    
        userInstructLabel.setFont((new Font("Verdana", Font.PLAIN, 15)));
       
        // set the layouts for labels
        alarmNameLabel.setBounds(20, 250, 100, 25);
        alarmDateLabel.setBounds(20, 290, 100, 25);
        alarmHoursLabel.setBounds(20, 330, 100, 25);
        alarmMinutesLabel.setBounds(150, 330, 100, 25);
        alarmSecondsLabel.setBounds(300, 330, 100, 25);
        userInstructLabel.setBounds(20,370,400,25);
        
        
        alarmNameLabel.add(list);
        // create JButtons
        JButton btnAdd = new JButton("Add");
        JButton btnDelete = new JButton("Delete");
        JButton btnUpdate = new JButton("Update");     
        JButton btnSaveToFile = new JButton("Save alarm to file");    
       
        alarmName.setBounds(120, 250, 130, 25);
        alarmDate.setBounds(120, 290, 150, 25);
      
        
     //   alarmDate.setBounds(120, 250, 100, 25);
       comboHours.setBounds(80, 330, 50, 25);
       comboMinutes.setBounds(230, 330, 50, 25);
       comboSeconds.setBounds(385,330,50,25);
        
        btnAdd.setBounds(500, 220, 100, 25);
        btnUpdate.setBounds(500, 265, 100, 25);
        btnDelete.setBounds(500, 310, 100, 25);
        btnSaveToFile.setBounds(700, 220, 150, 25);
        
        // create JScrollPane
        JScrollPane pane = new JScrollPane(table);
        pane.setBounds(0, 0, 880, 200);
        
        frame.setLayout(null);
        
        frame.add(pane);
        
        // add JTextFields to the jframe
        frame.add(alarmName);
        frame.add(alarmDate);
        frame.add(comboHours);
        frame.add(comboMinutes);
        frame.add(comboSeconds);
      
        // add the labels to frame
        frame.add(clockLabel);
        frame.add(alarmNameLabel);
        frame.add(alarmDateLabel);
        frame.add(alarmHoursLabel);
        frame.add(alarmMinutesLabel);
        frame.add(alarmSecondsLabel);
        frame.add(userInstructLabel);
        // add JButtons to the jframe
        frame.add(btnAdd);
        frame.add(btnDelete);
        frame.add(btnUpdate);
        frame.add(btnSaveToFile);
        
        // create an array of objects to set the row data
        final Object[] row = new Object[5];
        
        // button add row
        btnAdd.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
             
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                String date = sdf.format(alarmDate.getDate());
           
                row[0] = alarmName.getText();
                row[1] = date;
                row[2] = comboHours.getSelectedItem().toString();
                row[3] = comboMinutes.getSelectedItem().toString();
                row[4] = comboSeconds.getSelectedItem().toString();
                
                // add row to the model
                model.addRow(row);
            }
        });
        
        // button remove row
        btnDelete.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
            
                // i = the index of the selected row
                int i = table.getSelectedRow();
                if(i >= 0){
                    // remove a row from jtable
                    model.removeRow(i);
                    }
                        else{
                            System.out.println("Delete ");
                }
            }
        });
        
        // get selected row data From table to textfields 
        table.addMouseListener(new MouseAdapter(){
        
        @Override
        public void mouseClicked(MouseEvent e){
            
            // i = the index of the selected row
            int i = table.getSelectedRow();
            
            alarmName.setText(model.getValueAt(i, 0).toString());
            alarmDate.setDateFormatString(model.getValueAt(i, 1).toString());
            comboHours.setSelectedItem(model.getValueAt(i, 2).toString());
            comboMinutes.setSelectedItem(model.getValueAt(i, 3).toString());
            comboSeconds.setSelectedItem(model.getValueAt(i, 4).toString());
        }
        });
        
        // button update row
        btnUpdate.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
             
                // i = the index of the selected row
                int i = table.getSelectedRow();
                
                if(i >= 0) 
                {
                   model.setValueAt(alarmName.getText(), i, 0);
                   model.setValueAt(alarmDate.getCalendar(), i, 1);
                   model.setValueAt(comboHours.getSelectedItem(),i,2);
                   model.setValueAt(comboMinutes.getSelectedItem(),i,3);
                   model.setValueAt(comboSeconds.getSelectedItem(),i,4);
                }
                else{
                    System.out.println("Update ");
                    }
            }
        });
        
        frame.setSize(900,500);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        
    //I have used this tutorial on how to save data from jtable into txt file
    //https://community.oracle.com/tech/developers/discussion/1248613/how-to-save-data-from-jtable-into-txt-file
    // button save to file
    btnSaveToFile.addActionListener(new ActionListener(){
    @Override
    public void actionPerformed(ActionEvent e) 
    {
        try {
            StringBuilder fileContent = new StringBuilder();
            TableModel tableModel = table.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                
                Object alarmName = model.getValueAt(i, 0);
                Object alarmDate = model.getValueAt(i, 1);
                Object comboHours = model.getValueAt(i, 2);
                Object comboMinutes = model.getValueAt(i, 3);
                Object comboSeconds = model.getValueAt(i, 4);
                
                // read the data in each cell in a row
                fileContent.append(alarmName).append(", ").append(alarmDate).append(", ").append(comboHours).append(":").append(comboMinutes).append(":").append(comboSeconds).append("\n");
                // append each cell value to give a string output
            }
            
            FileWriter fileWriter = new FileWriter("C:\\Users\\PC\\Documents\\NetBeansProjects\\ClockForGraham_2\\clockforgraham.txt");            
            fileWriter.write(fileContent.toString());
            fileWriter.flush();
            try {
                fileWriter.close();
                
                    } catch (IOException ex) {
                        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                        }
                            } catch (IOException ex) {
                                Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                }
            } 
    });
   
    }
}
