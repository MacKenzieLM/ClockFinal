
import com.toedter.calendar.JDateChooser;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * This is my class for set alarm window.  I have all functionality pertaining to the window
 * in this class - entering details and buttons to control behaviour.  I have used 
 * references from the internet to help me code which are detailed in the method javadocs if necessary.
 * 
 * @author Lauren Smart 19016480
 */
@SuppressWarnings("serial")
public class SetAlarm3 extends JFrame {
  
    // create a new jframe with title
    JFrame frame = new JFrame("Set Alarm");
    
    //the main storage for the alarms
     static ArrayList<AlarmObject> alarmObject;
     static ArrayList<AlarmObject> mainAlarmTable;

    private static ArrayList<AlarmObject> alarmListStorage;
    
    // variables for labels, strings alarm trigger and text areas
    final JLabel currentTime;
    final JLabel userInstructLabel = new JLabel();
    String alarmName;
    String alarmDate;
    AlarmTrigger alarmTrigger;
    JTextArea area;
    JLabel label;

    // constructor for SetAlarm
    public SetAlarm3() {

        {
            // variable for alarm name
            final JTextField alarmName = new JTextField();

            // textfield set to 2 numbers
            JTextField hoursTF = new JTextField(2);
            JTextField minutesTF = new JTextField(2);

            // create  JTable
            final JTable table = new JTable();
            // create table headers
            String[] frameTitles = {"Alarm Name:", "Date:", "Time Hours:", "Time Minutes:"};
            String[] listAlarms = {alarmName.toString()};
            JTextField[] gtField = new JTextField[frameTitles.length];
            @SuppressWarnings("unchecked")
            JList list = new JList(new DefaultListModel());

            // adding the numerical values for the jcombo boxes
            String hoursArray[] = {"01", "02", "03", "04", "05", "06", "07", "08", "09",
                "10", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"};
            String minutesArray[] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
                "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"};

            // create the jcombo boxes for hours and minutes
            @SuppressWarnings("unchecked")
            final JComboBox comboHours = new JComboBox(hoursArray);
            @SuppressWarnings("unchecked")
            final JComboBox comboMinutes = new JComboBox(minutesArray);

            // create a table model and set a Column Identifiers to this model 
            Object[] columns = {"Alarm Name:", "Date:", "Time Hours:", "Time Minutes:"};
            Arrays.toString(columns);
            final DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columns);

            // set the model to the table
            table.setModel(model);

            // Change A JTable Background Color, Font Size, Font Color, Row Height
            Font font = new Font("", 1, 22);
            table.setFont(font);
            table.setRowHeight(30);

            // I have used this tutorial to set my clock to update every second    
            // https://stackoverflow.com/questions/19727449/java-how-to-update-a-panel-every-second  
            Timer timer = new Timer(1000, new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent arg0) {
                    currentTime.setText(new Date().toString());
                }
            });
            timer.start();

            currentTime = new JLabel(new Date().toString());
            frame.add(currentTime);
            currentTime.setBounds(20, 210, 300, 25);
            currentTime.setFont((new Font("Verdana", Font.PLAIN, 15)));

            // add date chooser
            final JDateChooser alarmDate = new JDateChooser();

            // create JLabels
            JLabel alarmNameLabel = new JLabel("Alarm Name:");
            JLabel alarmDateLabel = new JLabel("Alarm Date:");
            JLabel alarmHoursLabel = new JLabel("Set Hour:");
            JLabel alarmMinutesLabel = new JLabel("Set Minutes:");
            JLabel alarmSecondsLabel = new JLabel("Set Seconds:");
            JLabel userInstructLabel = new JLabel("*Please click on row to highlight*");
            userInstructLabel.setFont((new Font("Verdana", Font.PLAIN, 15)));

            // set the layouts for labels
            alarmNameLabel.setBounds(20, 250, 100, 25);
            alarmDateLabel.setBounds(20, 290, 100, 25);
            alarmHoursLabel.setBounds(20, 330, 100, 25);
            alarmMinutesLabel.setBounds(150, 330, 100, 25);
            alarmSecondsLabel.setBounds(300, 330, 100, 25);
            userInstructLabel.setBounds(20, 3600, 100, 25);
            alarmNameLabel.add(list);
            
            // create JButtons set alarm, delete, update save to file
            final JButton btnSetAlarm = new JButton("Set Alarm");
            JButton btnDelete = new JButton("Delete");
            JButton btnUpdate = new JButton("Update");
            JButton btnSaveToFile = new JButton("Save alarm to file");

            
            alarmName.setBounds(120, 250, 130, 25);
            alarmDate.setBounds(120, 290, 150, 25);

            comboHours.setBounds(80, 330, 50, 25);
            comboMinutes.setBounds(230, 330, 50, 25);

            btnSetAlarm.setBounds(500, 220, 100, 25);
            btnUpdate.setBounds(500, 265, 100, 25);
            btnDelete.setBounds(500, 310, 100, 25);
            btnSaveToFile.setBounds(700, 220, 150, 25);

            // create JScrollPane
            JScrollPane pane = new JScrollPane(table);
            pane.setBounds(0, 0, 880, 200);

            frame.setLayout(null);
            frame.add(pane);

            // add JTextFields to the jframe
            frame.add(alarmName);
            frame.add(alarmDate);
            frame.add(comboHours);
            frame.add(comboMinutes);

            // add the labels to frame
            frame.add(currentTime);
            frame.add(alarmNameLabel);
            frame.add(alarmDateLabel);
            frame.add(alarmHoursLabel);
            frame.add(alarmMinutesLabel);
            frame.add(userInstructLabel);
            
            // add JButtons to the jframe
            frame.add(btnSetAlarm);
            frame.add(btnDelete);
            frame.add(btnUpdate);
            frame.add(btnSaveToFile);
            //  frame.add(label);

            // create an array of objects to set the row data
            final Object[] row = new Object[4];


  
    /*
     * method for adding to row as a button
    */ 
    btnSetAlarm.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            // i need to set up a function to compare alarm strings
            // index = the index of the selected row
            int index = table.getSelectedRow();
            // if statement for adding two times id index of row is greater than 1 
            if (index >= 0) 
            {
                // so we can add user input then sort the times into priority
                // add the details into the two strings from user input
                String time1 = "Alarm Time: " + comboHours.getItemAt(comboHours.getSelectedIndex())
                        + ":" + comboMinutes.getItemAt(comboMinutes.getSelectedIndex());

                String time2 = "Alarm Time: " + comboHours.getItemAt(comboHours.getSelectedIndex())
                        + ":" + comboMinutes.getItemAt(comboMinutes.getSelectedIndex());
                // compare the two times
                int compareTo = time1.compareTo(time2);
            }

            // create a new alarm and time object with formatting
            ArrayList<AlarmObject> alarmObject = new ArrayList<>();
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
            String date = sdf.format(alarmDate.getDate());
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy '@'hh:mm a");

            // if statement to check if user has inputted all fields
            if (alarmName.getText().isEmpty() || alarmDate.getDateFormatString() == null
                    || comboHours.getSelectedItem() == null
                    || comboMinutes.getSelectedItem() == null) {

                // output warning
                JOptionPane.showMessageDialog(alarmName, "Please enter all fields");

               
            } else {
                 // set the inputs to the rows
                String name = alarmName.getText();
                String hour = comboHours.getSelectedItem().toString();
                String minute = comboMinutes.getSelectedItem().toString();

                row[0] = name;
                row[1] = date;
                row[2] = hour;
                row[3] = minute;
                // add row to the model
                model.addRow(row);

                //start alarm table sort
                //get all table rows and save to array
                AlarmTableModel[] alarms = new AlarmTableModel[table.getModel().getRowCount()];
                for (int k = 0; k < table.getModel().getRowCount(); k++) {
                    String rowName = (String) table.getModel().getValueAt(k, 0);
                    String rowDate = (String) table.getModel().getValueAt(k, 1);
                    String rowHour = (String) table.getModel().getValueAt(k, 2);
                    String rowMinute = (String) table.getModel().getValueAt(k, 3);
                    AlarmTableModel row_model = new AlarmTableModel(rowName, rowDate, rowHour, rowMinute);
                    alarms[k] = row_model;
                }
                //sort alarms(bubble sort)
                SortAlarm.bubbleSort(alarms);
                //clear table and add sorted alrams to table
                model.setRowCount(0);
                //update alarm list
                Controller.ALARM_LIST.clear();
                for (int k = 0; k < alarms.length; k++) {
                    Controller.ALARM_LIST.add(alarms[k]);
                    row[0] = alarms[k].getName();
                    row[1] = alarms[k].getDate();
                    row[2] = alarms[k].getHour();
                    row[3] = alarms[k].getMinute();
                    // add row to the model
                    model.addRow(row);
                }

                JOptionPane.showMessageDialog(alarmName, "Alarm data added");

            }
        }
    });
    /*
     * method for removing a row as a button
    */
    btnDelete.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {

            // i = the index of the selected row
            int i = table.getSelectedRow();
            if (i >= 0) {
                // remove a row from jtable
                model.removeRow(i);
                Controller.ALARM_LIST.remove(i);
            } else {
                System.out.println("Delete ");
            }
        }
    });

            // get selected row data From table to textfields 
            table.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {

                    // i = the index of the selected row
                    int i = table.getSelectedRow();

                    alarmName.setText(model.getValueAt(i, 0).toString());
                    try {
                        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                        alarmDate.setDate(sdf.parse(model.getValueAt(i, 1).toString()));
                    } catch (ParseException ex) {
                        alarmDate.setDate(new Date());
                    }

                    comboHours.setSelectedItem(model.getValueAt(i, 2).toString());
                    comboMinutes.setSelectedItem(model.getValueAt(i, 3).toString());

                }
            });

   /*
     * method for updating row as a button
    */
    btnUpdate.addActionListener(new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {

            SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
            String date = sdf.format(alarmDate.getDate());

            row[0] = alarmName.getText();
            row[1] = date;
            row[2] = comboHours.getSelectedItem().toString();
            row[3] = comboMinutes.getSelectedItem().toString();

            // i = the index of the selected row
            int i = table.getSelectedRow();

            if (i >= 0) {
                model.setValueAt(alarmName.getText(), i, 0);
                model.setValueAt(date, i, 1);
                model.setValueAt(comboHours.getSelectedItem(), i, 2);
                model.setValueAt(comboMinutes.getSelectedItem(), i, 3);

                //sort alrams gaim
                AlarmTableModel[] alarms = new AlarmTableModel[table.getModel().getRowCount()];
                for (int k = 0; k < table.getModel().getRowCount(); k++) {
                    String row_name = (String) table.getModel().getValueAt(k, 0);
                    String row_date = (String) table.getModel().getValueAt(k, 1);
                    String row_hour = (String) table.getModel().getValueAt(k, 2);
                    String row_minute = (String) table.getModel().getValueAt(k, 3);
                    AlarmTableModel row_model = new AlarmTableModel(row_name, row_date, row_hour, row_minute);
                    alarms[k] = row_model;
                }
                        //update alarm list
                        Controller.ALARM_LIST.clear();
                        //sort alarms
                        SortAlarm.bubbleSort(alarms);
                        //clear table and add sorted alrams to table
                        model.setRowCount(0);
                        for (int k = 0; k < alarms.length; k++) {
                            Controller.ALARM_LIST.add(alarms[k]);
                            row[0] = alarms[k].getName();
                            row[1] = alarms[k].getDate();
                            row[2] = alarms[k].getHour();
                            row[3] = alarms[k].getMinute();
                            // add row to the model
                            model.addRow(row);
                        }

                    } else {
                        System.out.println("Update ");
                    }
                }
            });

            frame.setSize(900, 500);
            frame.setLocationRelativeTo(null);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);

    //I have used this tutorial on how to save data from jtable into txt file
    //https://community.oracle.com/tech/developers/discussion/1248613/how-to-save-data-from-jtable-into-txt-file
    // button save to file
    btnSaveToFile.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                StringBuilder fileContent = new StringBuilder();
                TableModel tableModel = table.getModel();
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    // read the data in each cell in a row
                    Object alarmName = model.getValueAt(i, 0);
                    Object alarmDate = model.getValueAt(i, 1);
                    Object comboHours = model.getValueAt(i, 2);
                    Object comboMinutes = model.getValueAt(i, 3);

                    // append each cell value to give a string output
                    fileContent.append(alarmName).append(", ").append(alarmDate).append(", ").append(comboHours).append(", ").append(comboMinutes).append("\n"); //.append(":").append(comboSeconds).append("\n");

                        }

                        FileWriter fileWriter = new FileWriter("C:\\Users\\PC\\Documents\\NetBeansProjects\\ClockForGraham_3\\ClockForGraham_3\\clock.txt");
                     //   FileWriter fileWriter = new FileWriter("clock.txt");
                        fileWriter.write(fileContent.toString());
                        fileWriter.flush();

                        try {
                            fileWriter.close();

                        } catch (IOException ex) {
                            Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(JTable.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            // This section is based on an algorithm by - https://1bestcsharp.blogspot.com/2017/10/java-import-and-export-text-file-to-jtable.html
            // load alarm contents from file
            try {
                BufferedReader reader = new BufferedReader(new FileReader("clock.txt"));
                String line = null;
                Controller.ALARM_LIST.clear();
                
                while ((line = reader.readLine()) != null) {
                    String[] splits = line.split(",");
                    if (splits == null || splits.length < 4) {
                        continue;
                    }
                    String name = splits[0];
                    String date = splits[1];
                    String hour = splits[2];
                    String minute = splits[3];
                    
                    //read alarm from file and save it to alarm list
                    AlarmTableModel alarm_model = new AlarmTableModel(name, date, hour, minute);
                    Controller.ALARM_LIST.add(alarm_model);
                    
                    //add alram to table
                    row[0] = splits[0];
                    row[1] = splits[1];
                    row[2] = splits[2];
                    row[3] = splits[3];
                    // add row to the model
                    model.addRow(row);
                }
                reader.close();
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
    }

    /**
     * This function sees whether the alarm has passed, the alarm should go off,
     * or if the alarm time has not been reached.
     * This section is based on an algorithm by tmcclure, github
     * https://github.com/tmcclure4/AlarmClockJava
     *
     * @param comboHours
     * @param comboMinutes
     * @param alarmTime-the time the alarm is to go off
     * @return
     *
     */
    public static int sameTime(int comboHours, int comboMinutes, int alarmTime) {
        //get into military time
        int currentTime = (comboHours * 100) + comboMinutes;

        int returnValue;

        //the alarm time hasn't passed yet, stop
        if (currentTime < alarmTime) {
            returnValue = 0;
        } //times are the same, set alarm off
        else if (currentTime == alarmTime) {
            returnValue = 1;
        } //currentTime>alarmTime, alarm has gone off already, keep going
        else {
            returnValue = 2;
        }
        return returnValue;
    }

}
